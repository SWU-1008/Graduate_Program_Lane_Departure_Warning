from imgaug import LineString, LineStringsOnImage
import cv2
import numpy as np
from imgaug.augmentables.lines import LineString, LineStringsOnImage
from imgaug.augmentables.kps import Keypoint, KeypointsOnImage
import imgaug.augmenters as iaa
from imgaug.augmenters import Resize
import random

points = [[[258, 250, 242, 234, 226, 220, 217, 212, 209, 204, 201, 196, 193, 187]],
          [[203, 195, 187, 179, 171, 169, 164, 161, 155, 153, 148, 145, 142, 139]],
          [[6, 13, 22, 30, 38, 46, 58, 53, 61, 69, 78, 86, 94, 101, 107, 110, 118, 126, 134, 141, 147, 150, 157],
           [339, 332, 330, 324, 329, 322, 316, 321, 314, 308, 306, 300, 298, 292, 290, 284, 282, 276, 274, 268, 265,
            259, 257, 251, 249, 242, 237, 233, 228, 225, 219, 217, 211],
           [498, 491, 481, 473, 466, 458, 450, 443, 441, 433, 426, 421, 417, 409, 401, 394, 385, 377, 369, 362, 353,
            345, 337, 330, 323, 313, 306]],
          [[163, 161, 158, 157, 156, 154, 152, 152, 150, 149, 148, 147, 146, 145, 144, 142, 141, 140, 139, 137, 136,
            135, 133],
           [250, 249, 242, 241, 237, 235, 234, 229, 226, 224, 218, 217, 211, 209, 203, 202, 195, 193, 187, 185, 180,
            177, 173, 170, 166, 162, 160, 155, 153, 148, 145, 141, 139],
           [202, 201, 198, 196, 195, 194, 194, 193, 190, 188, 185, 184, 182, 180, 178, 176, 174, 172, 170, 168, 166,
            165, 163, 161, 160, 157, 155]],
          [[505, 498, 489, 481, 475, 473, 465, 457, 453, 449, 441, 433, 430, 425, 417, 410, 401, 393, 385, 382, 377,
            369, 362, 353, 345, 339, 330], [221, 229, 238, 245, 252, 254, 261, 268]],
          [[203, 200, 198, 194, 192, 190, 188, 185, 184, 182, 180, 177, 176, 174, 171, 168, 166, 163, 161, 160, 157,
            155, 153, 149, 147, 145, 141], [164, 162, 157, 155, 153, 150, 148, 146]],
          [[506, 497, 490, 481, 473, 468, 465, 457, 449, 443, 441, 433, 425, 420, 417, 409, 401, 395, 393, 385, 377,
            372, 369, 362, 354, 348, 345, 339], [221, 230, 237, 244, 254, 261, 267, 270, 277, 284]],
          [[198, 195, 192, 189, 186, 184, 183, 180, 178, 176, 175, 173, 170, 168, 167, 165, 162, 160, 159, 157, 154,
            152, 151, 148, 145, 144, 142, 140], [170, 165, 163, 161, 156, 154, 153, 150, 148, 146]],
          [[14, 19, 22, 29, 37, 46, 53, 59, 62, 69, 77, 85, 94, 101, 108, 117, 110, 125, 133, 141, 155, 149, 165],
           [345, 339, 338, 331, 330, 323, 321, 315, 313, 307, 305, 299, 297, 291, 289, 283, 281, 274, 269, 266, 261,
            257, 253, 249, 243, 241, 234, 225, 222, 217, 213, 210],
           [498, 491, 481, 473, 465, 458, 452, 449, 441, 434, 427, 417, 409, 402, 395, 385, 378, 370]],
          [[161, 160, 159, 158, 156, 155, 153, 152, 150, 149, 148, 148, 147, 145, 145, 142, 142, 141, 140, 139, 137,
            137, 133],
           [251, 249, 243, 242, 236, 234, 228, 226, 220, 218, 212, 210, 204, 202, 196, 194, 189, 186, 185, 179, 177,
            171, 170, 165, 161, 158, 153, 146, 145, 140, 137, 134],
           [202, 201, 197, 196, 194, 193, 193, 190, 189, 187, 185, 182, 180, 178, 177, 173, 171, 169]],
          [[13, 19, 22, 30, 38, 46, 53, 58, 62, 69, 77, 86, 94, 101, 107, 109, 117, 126, 134, 141, 149, 157, 165, 173],
           [346, 339, 338, 331, 330, 323, 321, 315, 313, 307, 305, 299, 297, 291, 289, 282, 276, 274, 268, 265, 260,
            257, 252, 249, 242, 233, 230, 225, 222, 217, 213, 210],
           [497, 491, 481, 473, 465, 458, 452, 449, 441, 434, 427, 417, 410, 402, 394]],
          [[161, 160, 158, 157, 156, 154, 153, 152, 150, 149, 149, 148, 146, 145, 144, 142, 141, 140, 139, 138, 136,
            134, 133, 132],
           [251, 250, 243, 242, 236, 234, 228, 226, 219, 218, 212, 210, 204, 202, 196, 194, 193, 187, 185, 179, 177,
            172, 170, 165, 161, 154, 152, 147, 145, 140, 138, 133],
           [203, 201, 198, 197, 194, 193, 193, 191, 189, 187, 185, 182, 181, 179, 177]],
          [[14, 21, 30, 37, 43, 46, 53, 61, 78, 70, 86, 93, 99, 110, 102, 118, 126, 134, 147, 141, 149, 157, 164],
           [331, 330, 323, 322, 315, 314, 307, 306, 299, 298, 291, 290, 283, 281, 274, 268, 273, 266, 260, 258, 252,
            249, 244, 241, 233, 225, 222, 217, 214, 209, 206, 202]],
          [[158, 156, 154, 153, 152, 151, 149, 148, 147, 147, 146, 145, 144, 142, 142, 141, 139, 138, 136, 136, 134,
            133, 132],
           [250, 243, 242, 235, 234, 227, 226, 219, 218, 211, 210, 204, 202, 196, 194, 193, 188, 186, 185, 179, 177,
            172, 170, 166, 161, 154, 152, 147, 145, 140, 137, 133]],
          [[14, 21, 30, 37, 42, 45, 61, 53, 70, 77, 85, 92, 101, 94, 109, 118, 126, 133, 139, 142, 149, 156],
           [323, 315, 314, 307, 306, 299, 298, 291, 290, 283, 282, 275, 274, 267, 259, 265, 259, 257, 251, 249, 242,
            233, 228, 225, 220, 217, 213, 209, 204, 201, 196]],
          [[157, 156, 154, 153, 152, 150, 149, 149, 148, 147, 145, 145, 142, 142, 141, 140, 139, 137, 136, 134, 133,
            132],
           [250, 242, 235, 234, 227, 226, 219, 218, 211, 210, 203, 203, 195, 194, 193, 187, 186, 180, 178, 173, 170,
            163, 160, 156, 153, 149, 146, 141, 138, 134, 131]],
          [[14, 21, 28, 37, 45, 53, 61, 69, 77, 83, 86, 93, 101, 109, 117, 125],
           [307, 306, 299, 298, 291, 290, 283, 282, 275, 274, 267, 274, 267, 260, 266, 259, 257, 251, 249, 243, 241,
            235, 233, 226, 222, 217, 213, 209, 206, 201, 197]],
          [[157, 155, 153, 150, 149, 148, 147, 146, 145, 144, 142, 141, 140, 139, 138, 137],
           [250, 243, 242, 235, 234, 227, 226, 219, 218, 211, 210, 203, 202, 202, 196, 194, 188, 186, 180, 178, 173,
            170, 166, 162, 161, 155, 153, 148, 145, 140, 137]],
          [[505, 501, 497, 489, 484, 481, 473, 465, 461, 457, 449, 444, 441, 433, 425, 421, 417, 409, 402, 393, 385,
            378, 369, 361, 356, 353, 345, 339, 330],
           [158, 165, 172, 174, 181, 189, 195, 198, 206, 213, 219, 222, 230, 238, 244, 254, 261, 269, 275]],
          [[209, 208, 206, 202, 200, 198, 196, 193, 192, 189, 186, 184, 182, 180, 177, 176, 174, 171, 168, 165, 163,
            160, 157, 154, 152, 150, 147, 144, 140],
           [180, 178, 177, 174, 172, 170, 168, 166, 164, 161, 160, 158, 157, 154, 152, 150, 148, 146, 145]],
          [[505, 497, 493, 489, 481, 474, 469, 465, 457, 452, 449, 441, 433, 429, 425, 417, 409, 406, 401, 393, 385,
            377, 369, 363, 361, 354, 346, 338],
           [126, 133, 142, 149, 156, 158, 165, 173, 182, 189, 197, 204, 206, 213, 221, 228, 230, 238, 245, 252, 261,
            269]],
          [[204, 201, 200, 198, 195, 192, 192, 189, 186, 184, 182, 180, 177, 176, 174, 172, 169, 168, 166, 163, 161,
            157, 154, 153, 150, 148, 145, 141],
           [196, 194, 188, 186, 185, 181, 180, 178, 173, 172, 170, 169, 166, 164, 162, 161, 158, 156, 154, 153, 149,
            147]],
          [[117, 134, 141, 149, 158, 165, 172, 174, 182, 189, 195, 198, 205, 212, 222, 229, 237, 242, 246, 253, 261,
            270, 277, 284],
           [505, 497, 489, 483, 481, 473, 465, 461, 457, 449, 441, 437, 433, 425, 418, 414, 409, 401, 394, 389, 385,
            377, 371, 362, 354, 347]],
          [[203, 197, 195, 193, 188, 186, 185, 182, 180, 178, 177, 174, 171, 169, 166, 163, 161, 160, 158, 155, 153,
            150, 148, 146],
           [199, 197, 194, 192, 190, 188, 185, 184, 182, 179, 177, 176, 174, 171, 169, 168, 166, 163, 160, 160, 158,
            155, 152, 149, 146, 145]],
          [[508, 497, 490, 481, 473, 465, 461, 457, 449, 441, 435, 433, 425, 417, 401, 393, 385, 380, 377, 369, 362,
            356, 353, 347],
           [109, 116, 117, 124, 126, 133, 140, 141, 149, 156, 157, 165, 173, 181, 190, 197, 198, 206, 212, 214, 222,
            229, 238, 245, 250, 254, 261, 266, 270, 278, 283, 286, 293, 300]],
          [[192, 188, 185, 182, 180, 177, 176, 175, 172, 170, 168, 167, 165, 163, 158, 156, 153, 152, 150, 148, 146,
            144, 142, 140],
           [243, 242, 235, 234, 229, 227, 226, 220, 218, 217, 212, 210, 204, 202, 196, 193, 190, 188, 185, 182, 180,
            177, 172, 169, 168, 165, 162, 160, 157, 154, 152, 150, 148, 145]],
          ]

# IPM
ipm_img_W = 480
ipm_img_H = 640
pts1 = np.float32([[241.0, 279], [316.0, 283], [112.0, 479.0], [528.0, 479.0]])  # 2
# pts2 = np.float32([[0,0],[135*4, 0],[92*4,112*4],[54*4,112*4]])
# pts2 = np.float32([[855,2500],[1368, 2500],[855,112*50-100],[1368,112*50-100]])
pts2 = np.float32(
    [[ipm_img_W // 2 - 60, 0], [ipm_img_W // 2 + 60, 0],
     [ipm_img_W // 2 - 60, ipm_img_H], [ipm_img_W // 2 + 60, ipm_img_H]])
M = cv2.getPerspectiveTransform(np.array(pts1), np.array(pts2))

for j in range(13):
    img_path = str(j) + '.jpg'
    img = cv2.imread(img_path)
    cv2.imshow('origin', img)
    xs = points[2 * j]
    ys = points[2 * j + 1]
    h, w = img.shape[:2]
    lss = []
    for line_x, line_y in zip(xs, ys):
        line = list(zip(line_x, line_y))
        lss.append(LineString(line))

    # 网络结果是 256x512 的图上的，需要进行转换
    image = np.zeros((256, 512))
    lsoi = LineStringsOnImage(lss, shape=image.shape)
    transformations = iaa.Sequential([Resize({'height': h, 'width': w})])
    image, line_strings = transformations(image=image, line_strings=lsoi)
    # line_strings.clip_out_of_image_()

    poly_img = np.copy(img)
    # 透视变换
    dst = cv2.warpPerspective(poly_img, M, (ipm_img_W, ipm_img_H))
    # cv2.imshow('ipm', dst)

    lanes = []
    colors = [(0, 255, 0), (255, 0, 0), (0, 0, 255)]

    for i, ls in enumerate(line_strings):
        kps = ls.to_keypoints()
        kpsoi = KeypointsOnImage(kps, img)
        kpsoi.draw_on_image(img, copy=False, color=colors[i], size=5)
        xys = kpsoi.to_xy_array()
        lanes.append(xys)
    # cv2.imshow('point', img)

    # cv2.polylines(img, lanes, isClosed=False, color=(0, 0, 255), thickness=3)
    ptss = []  # 透视之后的关键点
    for i, line in enumerate(lanes):
        # print('line', line)
        pst2 = cv2.perspectiveTransform(line.reshape(1, -1, 2), M)
        print(pst2)
        ptss.append(pst2[0])
        kpsoi = KeypointsOnImage.from_xy_array(pst2[0], dst.shape[:2])
        kpsoi.draw_on_image(dst, copy=False, color=colors[i], size=4)
    # cv2.imshow('ipm_point', dst)

    # 拟合
    for i, xys in enumerate(ptss):
        # print(xys)
        p = np.polyfit(xys[:, 1], xys[:, 0], 2)
        a, b, c = p.tolist()
        print("求解的曲线是:")
        print("x = " + str(a) + "y**2 +" + str(b) + "y +" + str(c))
        # 画拟合直线
        y = np.linspace(0, ipm_img_H, ipm_img_H)  ##在0-15直接画100个连续点
        x = a * y * y + b * y + c  ##函数式
        pppsss = list(zip(x, y))
        cv2.polylines(dst, np.int32([pppsss]), isClosed=False, color=colors[i], thickness=3)
    # cv2.imshow('ipm_poly', dst)

    '''
    勾画行车轨迹，只和拐弯的角度 theta 有关
    '''
    ta = random.randint(-10, 10)
    while ta == 0:
        ta = random.randint(-10, 10)
    theta = ta / 360 * np.pi
    L = 85
    H = 60
    d = 10
    zx = L / np.tan(theta) + ipm_img_W // 2
    zy = L + d + ipm_img_H
    R_l = np.sqrt(np.square(L) + np.square(L / np.tan(theta) + H / 2))
    R_r = np.sqrt(np.square(L) + np.square(L / np.tan(theta) - H / 2))
    y = np.linspace(0, ipm_img_H, ipm_img_H)  ##在0-15直接画100个连续点
    x_l = np.sqrt(np.square(R_l) - np.square(y - zy)) + zx
    x_l2 = -np.sqrt(np.square(R_l) - np.square(y - zy)) + zx
    x_r = np.sqrt(np.square(R_r) - np.square(y - zy)) + zx
    x_r2 = -np.sqrt(np.square(R_r) - np.square(y - zy)) + zx
    yy = np.hstack([y, y])
    # 处理左边
    x_ls = np.hstack([x_l, x_l2])
    xy_l = np.stack([x_ls, yy], axis=1)
    xy_l = np.where(np.isnan(xy_l), -1, xy_l)
    kps_l = KeypointsOnImage.from_xy_array(xy_l, dst.shape[:2])
    kps_l.clip_out_of_image()
    kps_l.draw_on_image(dst, copy=False, color=colors[2], size=1)
    # 处理右边
    x_rs = np.hstack([x_r, x_r2])
    xy_r = np.stack([x_rs, yy], axis=1)
    xy_r = np.where(np.isnan(xy_r), -1, xy_r)
    kps_r = KeypointsOnImage.from_xy_array(xy_r, dst.shape[:2])
    kps_r.clip_out_of_image()
    kps_r.draw_on_image(dst, copy=False, color=colors[2], size=1)
    speed = random.randint(5, 15)
    cv2.putText(dst, 'speed: ' + str(speed / 10) + 'm/s', (40, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255))
    cv2.putText(dst, 'steer roll: ' + str(ta), (40, 80), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255))

    cv2.imshow('ipm_trace', dst)

    cv2.waitKey()
    cv2.destroyAllWindows()
